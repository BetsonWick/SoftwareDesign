package org.openapitools.model;

import java.net.URI;
import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import org.openapitools.model.DayVisitsStatisticsResponse;
import org.openapitools.model.PassResponse;
import org.openapitools.model.SubscriptionResponse;
import org.openapitools.model.SummaryStatisticResponse;
import org.openapitools.jackson.nullable.JsonNullable;
import java.time.OffsetDateTime;
import javax.validation.Valid;
import javax.validation.constraints.*;
import io.swagger.v3.oas.annotations.media.Schema;


import java.util.*;
import javax.annotation.Generated;

/**
 * Стандартная обертка для ответов сервера
 */

@Schema(name = "CommonApiResponse", description = "Стандартная обертка для ответов сервера")
@JsonIgnoreProperties(
  value = "className", // ignore manually set className, it will be automatically generated by Jackson during serialization
  allowSetters = true // allows the className to be set during deserialization
)
@JsonTypeInfo(use = JsonTypeInfo.Id.NAME, include = JsonTypeInfo.As.PROPERTY, property = "className", visible = true)
@JsonSubTypes({
  @JsonSubTypes.Type(value = DayVisitsStatisticsResponse.class, name = "DayVisitsStatisticsResponse"),
  @JsonSubTypes.Type(value = PassResponse.class, name = "PassResponse"),
  @JsonSubTypes.Type(value = SubscriptionResponse.class, name = "SubscriptionResponse"),
  @JsonSubTypes.Type(value = SummaryStatisticResponse.class, name = "SummaryStatisticResponse")
})

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-27T02:02:07.747436500+03:00[Europe/Moscow]")
public class CommonApiResponse {

  @JsonProperty("className")
  private String className;

  @JsonProperty("host")
  private String host;

  @JsonProperty("version")
  private String version;

  @JsonProperty("executingTime")
  private String executingTime;

  @JsonProperty("actions")
  private String actions;

  public CommonApiResponse className(String className) {
    this.className = className;
    return this;
  }

  /**
   * Get className
   * @return className
  */
  
  @Schema(name = "className", required = false)
  public String getClassName() {
    return className;
  }

  public void setClassName(String className) {
    this.className = className;
  }

  public CommonApiResponse host(String host) {
    this.host = host;
    return this;
  }

  /**
   * Хост, на котором исполнялся запрос
   * @return host
  */
  
  @Schema(name = "host", description = "Хост, на котором исполнялся запрос", required = false)
  public String getHost() {
    return host;
  }

  public void setHost(String host) {
    this.host = host;
  }

  public CommonApiResponse version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Версия АПИ
   * @return version
  */
  
  @Schema(name = "version", description = "Версия АПИ", required = false)
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public CommonApiResponse executingTime(String executingTime) {
    this.executingTime = executingTime;
    return this;
  }

  /**
   * Время исполнения запроса в мс
   * @return executingTime
  */
  
  @Schema(name = "executingTime", description = "Время исполнения запроса в мс", required = false)
  public String getExecutingTime() {
    return executingTime;
  }

  public void setExecutingTime(String executingTime) {
    this.executingTime = executingTime;
  }

  public CommonApiResponse actions(String actions) {
    this.actions = actions;
    return this;
  }

  /**
   * Ручка, которая обрабатывала запрос
   * @return actions
  */
  
  @Schema(name = "actions", description = "Ручка, которая обрабатывала запрос", required = false)
  public String getActions() {
    return actions;
  }

  public void setActions(String actions) {
    this.actions = actions;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CommonApiResponse commonApiResponse = (CommonApiResponse) o;
    return Objects.equals(this.className, commonApiResponse.className) &&
        Objects.equals(this.host, commonApiResponse.host) &&
        Objects.equals(this.version, commonApiResponse.version) &&
        Objects.equals(this.executingTime, commonApiResponse.executingTime) &&
        Objects.equals(this.actions, commonApiResponse.actions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(className, host, version, executingTime, actions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CommonApiResponse {\n");
    sb.append("    className: ").append(toIndentedString(className)).append("\n");
    sb.append("    host: ").append(toIndentedString(host)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("    executingTime: ").append(toIndentedString(executingTime)).append("\n");
    sb.append("    actions: ").append(toIndentedString(actions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

