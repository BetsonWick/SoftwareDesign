/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package org.openapitools.api;

import org.openapitools.model.PassResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-03-27T02:02:07.747436500+03:00[Europe/Moscow]")
@Validated
@Tag(name = "turnstile", description = "the turnstile API")
public interface TurnstileApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /turnstile/{subscriptionId}/enter : Add enter event by subscriptionId
     *
     * @param subscriptionId  (required)
     * @return OK (status code 200)
     *         or Client error (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "enter",
        summary = "Add enter event by subscriptionId",
        tags = { "turnstile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PassResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client error"),
            @ApiResponse(responseCode = "500", description = "Server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/turnstile/{subscriptionId}/enter",
        produces = { "application/json" }
    )
    default ResponseEntity<PassResponse> enter(
        @Parameter(name = "subscriptionId", description = "", required = true) @PathVariable("subscriptionId") Integer subscriptionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /turnstile/{subscriptionId}/leave : Add leave event by subscriptionId
     *
     * @param subscriptionId  (required)
     * @return OK (status code 200)
     *         or Client error (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "leave",
        summary = "Add leave event by subscriptionId",
        tags = { "turnstile" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = PassResponse.class))
            }),
            @ApiResponse(responseCode = "400", description = "Client error"),
            @ApiResponse(responseCode = "500", description = "Server error")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/turnstile/{subscriptionId}/leave",
        produces = { "application/json" }
    )
    default ResponseEntity<PassResponse> leave(
        @Parameter(name = "subscriptionId", description = "", required = true) @PathVariable("subscriptionId") Integer subscriptionId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "null";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
